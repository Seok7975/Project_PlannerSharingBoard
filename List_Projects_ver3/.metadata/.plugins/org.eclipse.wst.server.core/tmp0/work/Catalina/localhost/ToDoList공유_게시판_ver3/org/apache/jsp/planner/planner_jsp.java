/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.89
 * Generated at: 2024-07-04 13:00:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.planner;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.text.ParseException;
import java.util.Collections;
import java.util.Comparator;
import com.example.Task;
import com.example.TaskDAO;
import java.io.PrintWriter;

public final class planner_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.example.Task");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.example.TaskDAO");
    _jspx_imports_classes.add("java.text.ParseException");
    _jspx_imports_classes.add("java.util.Comparator");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../css/bbsStle.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../css/todolistStyle.css\"> <!-- 외부 CSS 파일 참조 -->\r\n");
      out.write("    \r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("    <script src=\"../js/html2canvas.js\"></script> <!-- 스크린샷 저장용 -->\r\n");
      out.write("    <!-- <script src=\"https://cdn.jsdelivr.net/npm/html2canvas@0.4.1/dist/html2canvas.min.js\"> -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../css/jumbotronCustom.css\">\r\n");
      out.write("    <style>\r\n");
      out.write("        .equal-width-button {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            max-width: 200px; /* 원하는 최대 너비로 설정 */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script> // 이미지 저장 스크립트 코드\r\n");
      out.write("	    document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("	        document.getElementById(\"saveImageButton\").addEventListener(\"click\", function() {\r\n");
      out.write("	            html2canvas(document.querySelector(\".todo-container\"), {\r\n");
      out.write("	                useCORS: true, // CORS 문제 해결\r\n");
      out.write("	                backgroundColor: null, // 배경 투명하게\r\n");
      out.write("	                scale: 2 // 고해상도 이미지 생성\r\n");
      out.write("	            }).then(canvas => {\r\n");
      out.write("	                // 캔버스를 이미지로 변환\r\n");
      out.write("	                let imgData = canvas.toDataURL(\"image/png\");\r\n");
      out.write("	\r\n");
      out.write("	                // 새로운 캔버스 생성 및 크기 조정\r\n");
      out.write("	                let newCanvas = document.createElement('canvas');\r\n");
      out.write("	                let ctx = newCanvas.getContext('2d');\r\n");
      out.write("	                \r\n");
      out.write("	                // 원본 캔버스 크기\r\n");
      out.write("	                let originalWidth = canvas.width;\r\n");
      out.write("	                let originalHeight = canvas.height;\r\n");
      out.write("	                \r\n");
      out.write("	                // 원하는 크기로 조정 (예: 50% 크기로 줄이기)\r\n");
      out.write("	                let scaleFactor = 0.5;\r\n");
      out.write("	                newCanvas.width = originalWidth * scaleFactor;\r\n");
      out.write("	                newCanvas.height = originalHeight * scaleFactor;\r\n");
      out.write("	\r\n");
      out.write("	                // 원본 캔버스를 새로운 캔버스로 그리기 (크기 조정 포함)\r\n");
      out.write("	                ctx.drawImage(canvas, 0, 0, newCanvas.width, newCanvas.height);\r\n");
      out.write("	\r\n");
      out.write("	                // 새로운 캔버스를 이미지로 변환\r\n");
      out.write("	                let resizedImgData = newCanvas.toDataURL(\"image/png\");\r\n");
      out.write("	\r\n");
      out.write("	                // 이미지 다운로드 링크 생성\r\n");
      out.write("	                let link = document.createElement('a');\r\n");
      out.write("	                link.href = resizedImgData;\r\n");
      out.write("	                link.download = 'todo_list.png'; \r\n");
      out.write("	                link.click();\r\n");
      out.write("	            }).catch(function(error) {\r\n");
      out.write("	                console.error('Error capturing the image:', error);\r\n");
      out.write("	            });\r\n");
      out.write("	        });\r\n");
      out.write("	    });\r\n");
      out.write("    </script>\r\n");
      out.write("    <title>투두리스트 페이지</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    ");

        String userID = null;
        if(session.getAttribute("userID") != null) {
            userID = (String) session.getAttribute("userID");
        }

        if(userID == null) {
            PrintWriter script = response.getWriter();
            script.println("<script>");
            script.println("alert('로그인을 하세요')");
            script.println("location.href = '../id/login.jsp'");
            script.println("</script>");
        } else {
    
      out.write("\r\n");
      out.write("    <div class=\"sidebar\">\r\n");
      out.write("        <a href=\"../main.jsp\" style=\"text-align: center;\" >메인</a>\r\n");
      out.write("        <div class=\"dropdown\">\r\n");
      out.write("            <a href=\"../bbs.jsp?bbsCategory=all\" style=\"text-align: center;\" >게시판 <span class=\"caret\"></span></a>\r\n");
      out.write("            <ul class=\"dropdown-menu\">\r\n");
      out.write("                <li><a href=\"../bbs.jsp?bbsCategory=all\" style=\"text-align: center;\">전체글보기</a></li>\r\n");
      out.write("                <li><a href=\"../bbs.jsp?bbsCategory=free\" style=\"text-align: center;\">자유게시판</a></li>\r\n");
      out.write("                <li><a href=\"../bbs.jsp?bbsCategory=study\" style=\"text-align: center;\">공부게시판</a></li>\r\n");
      out.write("                <li><a href=\"../bbs.jsp?bbsCategory=exercise\" style=\"text-align: center;\">운동게시판</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("        <a href=\"planner/planner.jsp\" style=\"text-align: center;\">플래너</a>\r\n");
      out.write("    </div>\r\n");
      out.write("    <nav class=\"navbar navbar-default navbar-fixed-top\">\r\n");
      out.write("        <div class=\"container-fluid\">\r\n");
      out.write("            <div class=\"navbar-header\">\r\n");
      out.write("                <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\" aria-expanded=\"false\">\r\n");
      out.write("                    <span class=\"sr-only\">Toggle navigation</span>\r\n");
      out.write("                    <span class=\"icon-bar\"></span>\r\n");
      out.write("                    <span class=\"icon-bar\"></span>\r\n");
      out.write("                    <span class=\"icon-bar\"></span>\r\n");
      out.write("                </button>\r\n");
      out.write("                <a class=\"navbar-brand\" href=\"../main.jsp\">게시판 프로젝트</a>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n");
      out.write("                <ul class=\"nav navbar-nav\">\r\n");
      out.write("                    <li><a href=\"../main.jsp\">메인</a></li>\r\n");
      out.write("                    <li class=\"dropdown\">\r\n");
      out.write("                        <a href=\"../bbs.jsp?bbsCategory=all\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">게시판 <span class=\"caret\"></span></a>\r\n");
      out.write("                        <ul class=\"dropdown-menu\">\r\n");
      out.write("                            <li><a href=\"../bbs.jsp?bbsCategory=all\">전체글보기</a></li>\r\n");
      out.write("                            <li><a href=\"../bbs.jsp?bbsCategory=free\">자유게시판</a></li>\r\n");
      out.write("                            <li><a href=\"../bbs.jsp?bbsCategory=study\">공부게시판</a></li>\r\n");
      out.write("                            <li><a href=\"../bbs.jsp?bbsCategory=exercise\">운동게시판</a></li>\r\n");
      out.write("                        </ul>\r\n");
      out.write("                    </li>\r\n");
      out.write("                    <li class=\"active\"><a href=\"planner.jsp\">플래너</a></li> <!-- 플래너 메뉴 추가 -->\r\n");
      out.write("                </ul>\r\n");
      out.write("                <ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("                    <li class=\"dropdown\">\r\n");
      out.write("                        <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\">회원관리<span class=\"caret\"></span></a>\r\n");
      out.write("                        <ul class=\"dropdown-menu\">\r\n");
      out.write("                            <li><a href=\"../id/profile.jsp\">My Profile</a></li>\r\n");
      out.write("                            <li><a href=\"../id/logoutAction.jsp\">로그아웃</a></li>\r\n");
      out.write("                        </ul>\r\n");
      out.write("                    </li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </nav>\r\n");
      out.write("\r\n");
      out.write("    <div class=\"todo-container\">\r\n");
      out.write("        <h1>할 일 목록</h1>\r\n");
      out.write("        <form class=\"add-item\" action=\"addItem.jsp\" method=\"post\">\r\n");
      out.write("            <div class=\"form-group\">\r\n");
      out.write("                <input type=\"text\" class=\"form-control\" name=\"item\" placeholder=\"새로운 할 일 추가\" required>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"form-group\">\r\n");
      out.write("                <button type=\"button\" id=\"startButton\" class=\"btn btn-primary\">시작</button>\r\n");
      out.write("                <input type=\"datetime-local\" class=\"form-control\" id=\"startDateTime\" name=\"startDateTime\" required>\r\n");
      out.write("                <button type=\"button\" id=\"dueButton\" class=\"btn btn-primary\">마감</button>\r\n");
      out.write("                <input type=\"datetime-local\" class=\"form-control\" id=\"dueDateTime\" name=\"dueDateTime\" required>\r\n");
      out.write("                <button type=\"submit\" class=\"btn btn-primary\">추가</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("        <ul>\r\n");
      out.write("            ");

                TaskDAO taskDAO = new TaskDAO();
                List<Task> tasks = taskDAO.getTasks(userID);
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");

                // 시간 순서대로 정렬
                Collections.sort(tasks, new Comparator<Task>() {
                    public int compare(Task t1, Task t2) {
                        try {
                            Date startDate1 = dateFormat.parse(t1.getStartDateTime());
                            Date startDate2 = dateFormat.parse(t2.getStartDateTime());
                            return startDate1.compareTo(startDate2);
                        } catch (ParseException e) {
                            e.printStackTrace();
                            return 0;
                        }
                    }
                });

                for (Task task : tasks) {
                    Date startDate = null;
                    Date dueDate = null;
                    try {
                        if (task.getStartDateTime() != null && !task.getStartDateTime().isEmpty()) {
                            startDate = dateFormat.parse(task.getStartDateTime());
                        }
                        if (task.getDueDateTime() != null && !task.getDueDateTime().isEmpty()) {
                            dueDate = dateFormat.parse(task.getDueDateTime());
                        }
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
            
      out.write("\r\n");
      out.write("                <li class=\"");
      out.print( task.getCompleted().equals("yes") ? "completed" : "" );
      out.write("\">\r\n");
      out.write("                    <form action=\"toggleComplete.jsp\" method=\"post\" style=\"margin: 0;\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"taskId\" value=\"");
      out.print( task.getId() );
      out.write("\">\r\n");
      out.write("                        <input type=\"checkbox\" name=\"completed\" ");
      out.print( task.getCompleted().equals("yes") ? "checked" : "" );
      out.write(" onChange=\"this.form.submit()\">\r\n");
      out.write("                    </form>\r\n");
      out.write("                    <span>");
      out.print( task.getItem() );
      out.write(" \r\n");
      out.write("                        (시작: ");
      out.print( startDate != null ? outputFormat.format(startDate) : "N/A" );
      out.write(", \r\n");
      out.write("                        마감: ");
      out.print( dueDate != null ? outputFormat.format(dueDate) : "N/A" );
      out.write(")\r\n");
      out.write("                    </span>\r\n");
      out.write("                    <form action=\"deleteItem.jsp\" method=\"post\" style=\"margin: 0;\">\r\n");
      out.write("                        <input type=\"hidden\" name=\"taskId\" value=\"");
      out.print( task.getId() );
      out.write("\">\r\n");
      out.write("                        <button class=\"delete btn btn-danger\" type=\"submit\">삭제</button>\r\n");
      out.write("                    </form>\r\n");
      out.write("                </li>\r\n");
      out.write("            ");

                }
            
      out.write("\r\n");
      out.write("        </ul>\r\n");
      out.write("        <form action=\"saveTasksAction.jsp\" method=\"post\" style=\"margin-top: 20px;\">\r\n");
      out.write("            <button type=\"submit\" class=\"btn btn-info equal-width-button\">할 일 목록 텍스트파일 저장</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        <button id=\"saveImageButton\" class=\"btn btn-info equal-width-button\" style=\"margin-top: 10px;\">할 일 목록 그림파일 저장</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
